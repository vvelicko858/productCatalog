import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators, ReactiveFormsModule } from '@angular/forms';
import { NgIf } from '@angular/common';
import { Router } from '@angular/router';
import {AuthService} from '../../../core/services/auth.service';

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [ReactiveFormsModule, NgIf],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent {
  loginForm: FormGroup;
  passwordVisible = false;

  constructor(
    private fb: FormBuilder,
    private router: Router,
    private authService: AuthService,
  ) {
    this.loginForm = this.fb.group({
      email: ['', [Validators.required, Validators.email]],
      password: ['', Validators.required],
    });
  }

  togglePassword(input: HTMLInputElement): void {
    this.passwordVisible = !this.passwordVisible;
    input.type = this.passwordVisible ? 'text' : 'password';
  }


  register(): void {
    console.log('register');
    this.router.navigate(['/auth/register']);
  }

  onSubmit(): void {
    if (this.loginForm.valid) {

       this.authService.login(this.loginForm.value.email, this.loginForm.value.password).subscribe({
         next: (user) => {
           console.log('Login success:', user.user.uid);
           // üëâ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard
           this.router.navigate(['/dashboard']);
         },
         error: (err) => {
           console.error('Login error:', err);
           
           // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–≤—è–∑–∞–Ω–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–∞
           if (err instanceof Error && err.message.includes('–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω')) {
             alert('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏.');
           } else {
             alert('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ –≤ —Å–∏—Å—Ç–µ–º—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ email –∏ –ø–∞—Ä–æ–ª—å.');
           }
         }
       });
    } else {
      this.loginForm.markAllAsTouched();
    }
  }
}
